// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace sv.Sale.DBModels
{
    public partial class SaleContext : DbContext
    {
        public SaleContext()
        {
        }

        public SaleContext(DbContextOptions<SaleContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<DescriptionImage> DescriptionImages { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<ReportType> ReportTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserAddress> UserAddresses { get; set; }
        public virtual DbSet<UserReportProduct> UserReportProducts { get; set; }
        public virtual DbSet<Voucher> Vouchers { get; set; }
        public virtual DbSet<Ward> Wards { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cart>(entity =>
            {
                entity.ToTable("Cart");

                entity.Property(e => e.CartId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cartID");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("productID");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cart_Product");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cart_User");
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("City");

                entity.Property(e => e.CityId)
                    .ValueGeneratedNever()
                    .HasColumnName("cityID");

                entity.Property(e => e.CityName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("cityName");
            });

            modelBuilder.Entity<DescriptionImage>(entity =>
            {
                entity.HasKey(e => e.ImageId)
                    .HasName("PK_Description_Image2");

                entity.ToTable("Description_Image");

                entity.Property(e => e.ImageId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("imageID");

                entity.Property(e => e.ImageLink)
                    .IsRequired()
                    .HasColumnName("imageLink");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(100)
                    .HasColumnName("imageName");

                entity.Property(e => e.StoreId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("storeID");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.DescriptionImages)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Description_Image2_Store2");
            });

            modelBuilder.Entity<Discount>(entity =>
            {
                entity.ToTable("Discount");

                entity.Property(e => e.DiscountId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("discountID");

                entity.Property(e => e.DiscountName)
                    .HasMaxLength(100)
                    .HasColumnName("discountName");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.IsActive).HasColumnName("isActive");

                entity.Property(e => e.PercentDiscount).HasColumnName("percentDiscount");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");
            });

            modelBuilder.Entity<District>(entity =>
            {
                entity.ToTable("District");

                entity.Property(e => e.DistrictId)
                    .ValueGeneratedNever()
                    .HasColumnName("districtID");

                entity.Property(e => e.CityId).HasColumnName("cityID");

                entity.Property(e => e.DistrictName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("districtName");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Districts)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_District_City");
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.ToTable("Invoice");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoiceID");

                entity.Property(e => e.AccountingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("accountingDate");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdDate");

                entity.Property(e => e.InvoiceName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("invoiceName");

                entity.Property(e => e.OrderId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orderID");

                entity.Property(e => e.StoreId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("storeID");

                entity.Property(e => e.TotalAmount).HasColumnName("totalAmount");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userID");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("voucherID");

                entity.Property(e => e.VoucherType).HasColumnName("voucherType");

                entity.Property(e => e.VoucherValue).HasColumnName("voucherValue");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Invoice2_Order2");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Invoice2_Store2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Invoice2_User2");

                entity.HasOne(d => d.Voucher)
                    .WithMany(p => p.Invoices)
                    .HasForeignKey(d => d.VoucherId)
                    .HasConstraintName("FK_Invoice2_Voucher2");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("Order");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orderID");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("createdDate");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customerID");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(100)
                    .HasColumnName("customerName");

                entity.Property(e => e.CustomerPhone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("customerPhone");

                entity.Property(e => e.DiscountAmount).HasColumnName("discountAmount");

                entity.Property(e => e.EstimatedShippingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("estimatedShippingDate");

                entity.Property(e => e.InvoiceId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("invoiceID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .HasColumnName("notes");

                entity.Property(e => e.ShipAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("shipAddress");

                entity.Property(e => e.ShippingStatus).HasColumnName("shippingStatus");

                entity.Property(e => e.Shippingfee).HasColumnName("shippingfee");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.TotalAmount).HasColumnName("totalAmount");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("voucherID");

                entity.Property(e => e.VoucherType)
                    .HasMaxLength(100)
                    .HasColumnName("voucherType");

                entity.Property(e => e.VoucherValue).HasColumnName("voucherValue");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order2_User2");

                entity.HasOne(d => d.Voucher)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.VoucherId)
                    .HasConstraintName("FK_Order2_Voucher2");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.ToTable("Order_Detail");

                entity.Property(e => e.OrderDetailId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orderDetailID");

                entity.Property(e => e.DiscountId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("discountID");

                entity.Property(e => e.DiscountPercent).HasColumnName("discountPercent");

                entity.Property(e => e.OrderId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("orderID");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("productID");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unitID");

                entity.Property(e => e.UnitName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("unitName");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("FK_Order_Detail2_Discount2");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Detail2_Order2");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Detail2_Product3");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Detail2_Unit2");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("productID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnName("description");

                entity.Property(e => e.DiscountAmount).HasColumnName("discountAmount");

                entity.Property(e => e.IsDiscountPercent).HasColumnName("isDiscountPercent");

                entity.Property(e => e.MainImage).HasColumnName("mainImage");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.ProductCategoryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("productCategoryID");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("productName");

                entity.Property(e => e.QuantitySold).HasColumnName("quantitySold");

                entity.Property(e => e.Rating).HasColumnName("rating");

                entity.Property(e => e.SearchString)
                    .IsUnicode(false)
                    .HasColumnName("searchString");

                entity.Property(e => e.StoreId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("storeID");

                entity.Property(e => e.SubDescription).HasColumnName("subDescription");

                entity.Property(e => e.VideoLink).HasColumnName("videoLink");

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product3_Product_Category2");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product3_Store2");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.ToTable("Product_Category");

                entity.Property(e => e.ProductCategoryId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("productCategoryID");

                entity.Property(e => e.ProductCategoryName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("productCategoryName");
            });

            modelBuilder.Entity<ProductImage>(entity =>
            {
                entity.HasKey(e => e.ImageId)
                    .HasName("PK_Product_Image2");

                entity.ToTable("Product_Image");

                entity.Property(e => e.ImageId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("imageID");

                entity.Property(e => e.ImageLink)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("imageLink");

                entity.Property(e => e.IsMain).HasColumnName("isMain");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("productID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductImages)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Image2_Product3");
            });

            modelBuilder.Entity<Rating>(entity =>
            {
                entity.ToTable("Rating");

                entity.Property(e => e.RatingId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ratingID");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.CustomerId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CustomerID");

                entity.Property(e => e.MediaLink).HasColumnName("mediaLink");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ProductID");

                entity.Property(e => e.Star).HasColumnName("star");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Ratings)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rating2_User2");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Ratings)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Rating2_Product2");
            });

            modelBuilder.Entity<ReportType>(entity =>
            {
                entity.HasKey(e => e.ReportType1);

                entity.ToTable("Report_Type");

                entity.Property(e => e.ReportType1)
                    .ValueGeneratedNever()
                    .HasColumnName("reportType");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("Role");

                entity.Property(e => e.RoleId)
                    .ValueGeneratedNever()
                    .HasColumnName("roleID");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("roleName");
            });

            modelBuilder.Entity<Store>(entity =>
            {
                entity.ToTable("Store");

                entity.Property(e => e.StoreId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("storeID");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("accountName");

                entity.Property(e => e.CityId).HasColumnName("cityID");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DistrictId).HasColumnName("districtID");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.FullAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("fullAddress");

                entity.Property(e => e.IsBaned).HasColumnName("isBaned");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.ShortAddress)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("shortAddress");

                entity.Property(e => e.StoreLogo)
                    .IsRequired()
                    .HasColumnName("storeLogo");

                entity.Property(e => e.StoreName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("storeName");

                entity.Property(e => e.Wallet).HasColumnName("wallet");

                entity.Property(e => e.WardId).HasColumnName("wardID");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.ToTable("Unit");

                entity.Property(e => e.UnitId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("unitID");

                entity.Property(e => e.Notes).HasMaxLength(100);

                entity.Property(e => e.UnitName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("unitName");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("User");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userID");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("createdAt");

                entity.Property(e => e.Email)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("fullName");

                entity.Property(e => e.IsBaned).HasColumnName("isBaned");

                entity.Property(e => e.PassWord)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("passWord");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.RoleId).HasColumnName("roleID");

                entity.Property(e => e.ShipAddress).HasColumnName("shipAddress");

                entity.Property(e => e.ShipAddressId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("shipAddressID");

                entity.Property(e => e.Token)
                    .IsRequired()
                    .HasColumnName("token");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("userName");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User2_Role");
            });

            modelBuilder.Entity<UserAddress>(entity =>
            {
                entity.HasKey(e => e.AddressId)
                    .HasName("PK_User_Address2");

                entity.ToTable("User_Address");

                entity.Property(e => e.AddressId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("addressID");

                entity.Property(e => e.CityId).HasColumnName("cityID");

                entity.Property(e => e.DistrictId).HasColumnName("districtID");

                entity.Property(e => e.FullAddress)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("fullAddress");

                entity.Property(e => e.ShortAddress)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("shortAddress");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userID");

                entity.Property(e => e.WardId).HasColumnName("wardID");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.UserAddresses)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Address2_City");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.UserAddresses)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Address2_District");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserAddresses)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Address2_User2");

                entity.HasOne(d => d.Ward)
                    .WithMany(p => p.UserAddresses)
                    .HasForeignKey(d => d.WardId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Address2_Ward");
            });

            modelBuilder.Entity<UserReportProduct>(entity =>
            {
                entity.HasKey(e => e.ReportId)
                    .HasName("PK_User_Report_Product2");

                entity.ToTable("User_Report_Product");

                entity.Property(e => e.ReportId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("reportID");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .HasColumnName("notes");

                entity.Property(e => e.ProductId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("productID");

                entity.Property(e => e.ReportType).HasColumnName("reportType");

                entity.Property(e => e.ReportTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("reportTypeName");

                entity.Property(e => e.StoreId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("storeID");

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userID");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.UserReportProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Report_Product2_Product2");

                entity.HasOne(d => d.ReportTypeNavigation)
                    .WithMany(p => p.UserReportProducts)
                    .HasForeignKey(d => d.ReportType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Report_Product2_Report_Type");

                entity.HasOne(d => d.Store)
                    .WithMany(p => p.UserReportProducts)
                    .HasForeignKey(d => d.StoreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Report_Product2_Store2");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserReportProducts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Report_Product2_User2");
            });

            modelBuilder.Entity<Voucher>(entity =>
            {
                entity.ToTable("Voucher");

                entity.Property(e => e.VoucherId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("voucherID");

                entity.Property(e => e.Description)
                    .HasMaxLength(300)
                    .HasColumnName("description");

                entity.Property(e => e.FromDate)
                    .HasColumnType("datetime")
                    .HasColumnName("fromDate");

                entity.Property(e => e.ToDate)
                    .HasColumnType("datetime")
                    .HasColumnName("toDate");

                entity.Property(e => e.VoucherName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("voucherName");

                entity.Property(e => e.VoucherType).HasColumnName("voucherType");

                entity.Property(e => e.VoucherValue).HasColumnName("voucherValue");
            });

            modelBuilder.Entity<Ward>(entity =>
            {
                entity.ToTable("Ward");

                entity.Property(e => e.WardId)
                    .ValueGeneratedNever()
                    .HasColumnName("wardID");

                entity.Property(e => e.DistrictId).HasColumnName("districtID");

                entity.Property(e => e.WardName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("wardName");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.Wards)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ward2_District");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}